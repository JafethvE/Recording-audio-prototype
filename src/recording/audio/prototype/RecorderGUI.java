package recording.audio.prototype;

import java.awt.Color;
import javax.swing.JFrame;

/**
 * A GUI frame for the recording program.
 * @author Jafeth
 * TODO: Create language interface to support multiple languages.
 */
public class RecorderGUI extends javax.swing.JFrame {

    private final SoundRecorder recorder;//An instance of the recorder class to do the actual recording.
    
    /**
     * Creates new form RecorderGUI
     */
    public RecorderGUI() {
        recorder = new SoundRecorder(this);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        messageLabel = new javax.swing.JLabel();
        titleLabel = new javax.swing.JLabel();
        startButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(messageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(messageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        titleLabel.setText("Recording prototype");

        startButton.setText("START");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        stopButton.setText("STOP");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(titleLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(startButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stopButton)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startButton)
                    .addComponent(stopButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Is called when the start button is pressed. Starts the recording.
     * @param evt The event of the button being pressed.
     */
    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        this.recorder.startRecording();
    }//GEN-LAST:event_startButtonActionPerformed

    /**
     * Is called when the stop button is pressed. Stops the recording.
     * @param evt The event of the button being pressed.
     */
    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        this.recorder.finish();
    }//GEN-LAST:event_stopButtonActionPerformed
    
    public void formatNotSupportedActionPerformed()
    {
        //Tells the user the microphone can not record the currently set audioformat.
        //Colour is red to imply an error.
        this.messageLabel.setForeground(Color.RED);
        this.messageLabel.setText("Audio format not supported on the microphone.");
    }
    
    /**
     * Is triggered when the attempt to find a microphone is unsuccessful.
     */
    public void lineNotFoundActionPerformed()
    {
        //Tells the user a microphone could not be found.
        //Colour is red to imply an error.
        this.messageLabel.setForeground(Color.RED);
        this.messageLabel.setText("Microphone not found.");
    }
    
    /**
     * Is triggered when a recording start attempt is successful.
     */
    public void recordingStartedActionPerformed()
    {
        //Tells the user the recording start attempt was successful.
        //Colour is black to imply being just a notification.
        this.messageLabel.setForeground(Color.BLACK);
        this.messageLabel.setText("Recording started");
    }
    
    /**
     * Is triggered when a recording start attempt is unsuccessful.
     */
    public void recordingNotStartedActionPerformed()
    {
        //Tells the user the recording start attempt was unsuccessful.
        //Colour is red to imply an error.
        this.messageLabel.setForeground(Color.RED);
        this.messageLabel.setText("Recording not started");
    }
    
    /**
     * Is triggered when a recording stop attempt is successful.
     */
    public void recordingStoppedActionPerformed(FileSystem fileSystem)
    {
        //Tells the user the recording stop attempt was successful.
        //Colour is black to imply being just a notification.
        this.messageLabel.setForeground(Color.BLACK);
        this.messageLabel.setText("Recording stopped\nFile can be found under: " + fileSystem.getFilePath() + "RecordAudio.wav");
    }
    
    /**
     * Is triggered when a recording stop attempt is unsuccessful.
     */
    public void recordingNotStoppedActionPerformed()
    {
        //Tells the user the recording stop attempt was unsuccessful.
        //Colour is red to imply an error.
        this.messageLabel.setForeground(Color.RED);
        this.messageLabel.setText("Recording not stopped");
    }
    
    /**
     * Is triggered when the OS is not supported.
     */
    public void osNotSupportedActionperformed()
    {
        //Tells the user the OS is not supported and recording might not work.
        //Colour is red to imply an error.
        this.messageLabel.setForeground(Color.RED);
        this.messageLabel.setText("OS not supported.\nRecording might not work.");
    }
    
    /**
     * The start of the program. Creates the GUI.
     * @param args The command line arguments.
     */
    public static void main(String[] args)
    {
        //Creates a new recorder GUI.
        RecorderGUI gui = new RecorderGUI();
        
        //Sets the default operation of the close button of the GUI to exit.
        gui.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        //Makes the GUI visible.
        gui.setVisible(true);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}