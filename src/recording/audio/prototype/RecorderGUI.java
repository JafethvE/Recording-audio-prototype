package recording.audio.prototype;

import java.awt.Color;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JComboBox;
import javax.swing.JTextPane;

/**
 * A GUI frame for the recording program.
 *
 * @author Jafeth TODO: Create language interface to support multiple languages.
 */
public class RecorderGUI extends javax.swing.JFrame {

    private final SoundRecorder recorder;//An instance of the recorder class to do the actual recording.

    /**
     * Creates new form RecorderGUI
     */
    public RecorderGUI() {
        recorder = new SoundRecorder(this);
        backgroundPanel = new JPanel();
        startButton = new JButton();
        stopButton = new JButton();
        messageTextPane = new JTextPane();
        titleLabel = new JLabel();
        sampleRateLabel = new JLabel();
        sampleRateComboBox = new JComboBox<>();
        sampleSizeLabel = new JLabel();
        sampleSizeComboBox = new JComboBox<>();
        channelsLabel = new JLabel();
        channelsComboBox = new JComboBox<>();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        sampleRateLabel.setText("Sample rate:");

        sampleRateComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"8000", "16000", "32000", "44100", "48000", "96000", "192000"}));

        sampleSizeLabel.setText("Sample Size:");

        sampleSizeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"8", "16", "20", "24", "32"}));

        channelsLabel.setText("Channels:");

        messageTextPane.setEditable(false);
        messageTextPane.setForeground(Color.BLACK);
        messageTextPane.setText("");

        Channel[] channels = new Channel[4];
        channels[0] = new Channel(1, "Mono");
        channels[1] = new Channel(2, "Stereo");
        channels[2] = new Channel(4, "Quadrophonic");
        channels[3] = new Channel(6, "5.1 Surround");

        channelsComboBox.setModel(new javax.swing.DefaultComboBoxModel(channels));

        startButton.setText("START");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        stopButton.setText("STOP");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        titleLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        titleLabel.setText("Recording prototype");
        titleLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout backgroundPanelLayout = new javax.swing.GroupLayout(backgroundPanel);
        backgroundPanel.setLayout(backgroundPanelLayout);
        backgroundPanelLayout.setHorizontalGroup(
                backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(backgroundPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(messageTextPane)
                                .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backgroundPanelLayout.createSequentialGroup()
                                        .addComponent(startButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(stopButton)))
                        .addContainerGap())
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(backgroundPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(backgroundPanelLayout.createSequentialGroup()
                                                .addComponent(sampleRateLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(sampleRateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(backgroundPanelLayout.createSequentialGroup()
                                                .addComponent(sampleSizeLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(sampleSizeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(backgroundPanelLayout.createSequentialGroup()
                                                .addComponent(channelsLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(channelsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap()))
        );
        backgroundPanelLayout.setVerticalGroup(
                backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backgroundPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(titleLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                        .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(startButton, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(stopButton, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addComponent(messageTextPane, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(backgroundPanelLayout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(sampleRateLabel)
                                        .addComponent(sampleRateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(sampleSizeLabel)
                                        .addComponent(sampleSizeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(channelsLabel)
                                        .addComponent(channelsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(143, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
        );

        pack();
    }// </editor-fold>

    /**
     * Is called when the start button is pressed. Starts the recording.
     *
     * @param evt The event of the button being pressed.
     */
    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {
        float sampleRate = Float.valueOf(this.sampleRateComboBox.getSelectedItem().toString());
        int sampleSize = Integer.decode(this.sampleSizeComboBox.getSelectedItem().toString());
        Channel chosenChannel = (Channel) this.channelsComboBox.getSelectedItem();
        int channels = chosenChannel.getChannels();
        this.recorder.startRecording(sampleRate, sampleSize, channels);
    }

    /**
     * Is called when the stop button is pressed. Stops the recording.
     *
     * @param evt The event of the button being pressed.
     */
    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        this.recorder.finish();
    }//GEN-LAST:event_stopButtonActionPerformed

    /**
     * Is triggered when the user tries to start recording, and the audio format
     * options they have selected are not supported on their microphone.
     */
    public void formatNotSupportedActionPerformed() {
        //Tells the user the microphone can not record the currently set audioformat.
        //Colour is red to imply an error.
        this.messageTextPane.setForeground(Color.RED);
        this.messageTextPane.setText("ERROR: Audio format not supported on the microphone.");
    }

    /**
     * Is triggered when the attempt to find a microphone is unsuccessful.
     */
    public void lineNotFoundActionPerformed() {
        //Tells the user a microphone could not be found.
        //Colour is red to imply an error.
        this.messageTextPane.setForeground(Color.RED);
        this.messageTextPane.setText("ERROR: Microphone not found.");
    }

    /**
     * Is triggered when a recording start attempt is successful.
     */
    public void recordingStartedActionPerformed() {
        //Tells the user the recording start attempt was successful.
        //Colour is black to imply being just a notification.
        this.messageTextPane.setForeground(Color.BLACK);
        this.messageTextPane.setText("Recording started");
    }

    /**
     * Is triggered when a recording start attempt is unsuccessful.
     */
    public void recordingNotStartedActionPerformed() {
        //Tells the user the recording start attempt was unsuccessful.
        //Colour is red to imply an error.
        this.messageTextPane.setForeground(Color.RED);
        this.messageTextPane.setText("Recording not started");
    }

    /**
     * Is triggered when a recording stop attempt is successful.
     */
    public void recordingStoppedActionPerformed(FileSystem fileSystem) {
        //Tells the user the recording stop attempt was successful.
        //Colour is black to imply being just a notification.
        this.messageTextPane.setForeground(Color.BLACK);
        this.messageTextPane.setText("Recording stopped\nFile can be found under: " + fileSystem.getFilePath() + "RecordAudio.wav");
    }

    /**
     * Is triggered when a recording stop attempt is unsuccessful.
     */
    public void recordingNotStoppedActionPerformed() {
        //Tells the user the recording stop attempt was unsuccessful.
        //Colour is red to imply an error.
        this.messageTextPane.setForeground(Color.RED);
        this.messageTextPane.setText("ERROR: Recording not stopped");
    }

    /**
     * Is triggered when the OS is not supported.
     */
    public void osNotSupportedActionperformed() {
        //Tells the user the OS is not supported and recording might not work.
        //Colour is red to imply an error.
        this.messageTextPane.setForeground(Color.RED);
        this.messageTextPane.setText("ERROR: OS not supported.\nRecording might not work.");
    }

    /**
     * Is triggered when the user tries to start recording while a recording is
     * already going on.
     */
    public void recordingAlreadyStartedActionPerformed() {
        //Tells the user the program is already recording.
        //Colour is red to imply an error.
        this.messageTextPane.setForeground(Color.RED);
        this.messageTextPane.setText("ERROR: Recording already started");
    }

    /**
     * Is triggered when the user tries to stop recording while no recording is
     * going on.
     */
    public void recordingAlreadyStoppedActionPerformed() {
        //Tells the user the program is already recording.
        //Colour is red to imply an error.
        this.messageTextPane.setForeground(Color.RED);
        this.messageTextPane.setText("ERROR: Recording already stopped");
    }

    /**
     * The start of the program. Creates the GUI.
     *
     * @param args The command line arguments.
     */
    public static void main(String[] args) {
        //Creates a new recorder GUI.
        RecorderGUI gui = new RecorderGUI();

        //Sets the default operation of the close button of the GUI to exit.
        gui.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        //Makes the GUI visible.
        gui.setVisible(true);
    }

    // Variables declaration - do not modify
    private final JPanel backgroundPanel;
    private final JComboBox<String> channelsComboBox;
    private final JLabel channelsLabel;
    private final JTextPane messageTextPane;
    private final JComboBox<String> sampleRateComboBox;
    private final JLabel sampleRateLabel;
    private final JComboBox<String> sampleSizeComboBox;
    private final JLabel sampleSizeLabel;
    private final JButton startButton;
    private final JButton stopButton;
    private final JLabel titleLabel;
    // End of variables declaration
}
